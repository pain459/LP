http {
    lua_shared_dict rate_limit_store 10m;

    init_by_lua_block {
        local redis_host = "redis-nginx"
        local redis_port = 6378
        local redis_password = "your_password"
        local redis = require "resty.redis"
        local red = redis:new()

        red:set_timeout(1000)  -- 1 sec

        local ok, err = red:connect(redis_host, redis_port)
        if not ok then
            ngx.log(ngx.ERR, "failed to connect to Redis: ", err)
            return
        end

        local res, err = red:auth(redis_password)
        if not res then
            ngx.log(ngx.ERR, "failed to authenticate to Redis: ", err)
            return
        end

        ngx.shared.rate_limit_store:set("redis", red)
    }

    server {
        listen 80;

        location / {
            access_by_lua_block {
                local redis = ngx.shared.rate_limit_store:get("redis")
                if not redis then
                    ngx.log(ngx.ERR, "Redis connection is not available")
                    ngx.exit(500)
                    return
                end

                local ip = ngx.var.remote_addr
                local key = "rate_limit:" .. ip
                local limit = 100

                local current, err = redis:get(key)
                if not current then
                    current = 0
                    redis:set(key, current, "EX", 1)  -- Set with expiration of 1 second
                end

                current = tonumber(current)
                if current >= limit then
                    ngx.exit(429)
                    return
                end

                redis:incr(key)
            }
            proxy_pass http://backend_service;
        }
    }
}
